-- UCI Page Controller
-- by Braden Jones
-- July 2024
-- Information block for the plugin
PluginInfo = {
  Name = "UCI Page Controller",
  Version = "0.1",
  BuildVersion = "0.0.0.57",
  Id = "d8b8afab-7904-4176-b107-42f22885d971",
  Author = "Braden Jones",
  Description = "A advanced UCI Page Controller allowing for tab based navigation with multiple pages."  
}
 -- Define the color of the plugin object in the design
function GetColor(props)
    return {102, 102, 102}
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
    return "UCI Page Controller " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = {"Setup", "Tabs", "Power States", "Controls"}
function GetPages(props)
    local pages = {}
    for ix, name in ipairs(PageNames) do
        table.insert(pages, {
            name = PageNames[ix]
        })
    end
    return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
    local model = {}
    if props.Model ~= nil and props.Model.Value ~= "" then
      table.insert(model, { props.Model.Value } )
    else
      table.insert(model, { "Base Model" } )
    end
    return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
    local props = {}
    table.insert(props, {
        Name = "Number of TSCs",
        Type = "integer",
        Value = 1,
        Min = 0,
        Max = 20
    })
    table.insert(props, {
        Name = "Tabs",
        Type = "integer",
        Value = 2,
        Min = 0,
        Max = 20
    })
    table.insert(props, {
        Name = "System Power States",
        Type = "boolean",
        Value = 0
    })

    return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
    local pins = {}
    
    -- for i=1,props["Number of Faders"].Value do
    --   table.insert(pins,{
    --     Name = "Output " .. i,
    --     Direction = "output",
    --   })
    --   table.insert(pins,{
    --     Name = "Input " .. i,
    --     Direction = "input",
    --   })
      
    -- end
    return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
    return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
    local components = {}
    -- table.insert(components,{
    --   Name = "main_mixer",
    --   Type = "mixer",
    --   Properties =   
    --   {
    --     ["n_inputs"] = 1,
    --     ["n_outputs"] = 2,
    --   }
    -- })
    
    
    -- for i=1,props["Number of Faders"].Value do
    --   table.insert(components,{
    --     Name = "gain" .. i,
    --     Type = "gain",
    --     Properties = {
    --       ["max_gain"] = props["Max Gain"].Value,
    --       ["min_gain"] = props["Min Gain"].Value,
    --       ["multi_channel_type"] = 1,
    --     }
    --   })
    --   table.insert(components,{
    --     Name = "meter" .. i,
    --     Type = "meter2",
    --     Properties =
    --     {
    --       ["meter_type"] = 1,
    --       ["multi_channel_type"] = 1,
    --     }
    --   })
      
    -- end
    
    
    
    
    return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
    local wiring = {}
    --table.insert( wiring, { "Audio Output", "main_mixer Output 1" } )
    
      -- for i=1,props["Number of Faders"].Value do
      --   print("Wiring " .. i)
      --   table.insert(wiring, {"Input " .. i, "gain" .. i .. " Input"})
      --   table.insert(wiring, {"Input " .. i, "meter" .. i .. " Input"})
      --   table.insert(wiring, {"gain" .. i .. " Output", "Output " .. i})
      -- end
    
    
    
    --table.insert(wiring,{"Audio Input","main_meter Input"})
    return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
    local ctrls = {}
    -- for i=1,props["Number of Faders"].Value do
    --   table.insert(ctrls, {
    --     Name = "Gain " .. i,
    --     ControlType = "Knob",
    --     Count = 1,
    --     ControlUnit = "dB",
    --     Min = props["Min Gain"].Value,
    --     Max = props["Max Gain"].Value,
    --     DefaultValue = 0,
    --     UserPin = true,
    --     PinStyle = "Both",
    --   })
    --   table.insert(ctrls, {
    --     Name = "Meter " .. i,
    --     ControlType = "Indicator",
    --     IndicatorType = "Meter",
    --     Count = 1,
    --     DefaultValue = 0,
    --     UserPin = true,
    --     PinStyle = "Output",
    --   })
    --   table.insert(ctrls, {
    --     Name = "Mute " .. i,
    --     ControlType = "Button",
    --     ButtonType = "Toggle",
    --     Count = 1,
    --     DefaultValue = 0,
    --     UserPin = true,
    --     PinStyle = "Both",
    --   })
    -- end
    for i = 1, props["Number of TSCs"].Value do
        -- for every tab generate associated controls
        table.insert(ctrls, {
            Name = "tsc." .. i,
            ControlType = "Text",
            DefaultValue = "TSC Name",
            UserPin = true,
            PinStyle = "Input",
            Count = 1
        })
    end
    
    for i = 1, props["Tabs"].Value do
        -- for every tab generate associated controls
        table.insert(ctrls, {
            Name = "tab." .. i .. ".page.name",
            ControlType = "Text",
            DefaultValue = "Tab Name",
            UserPin = true,
            PinStyle = "Input",
            Count = 1
        })
        table.insert(ctrls, {
            Name = "tab." .. i .. ".uci.name",
            ControlType = "Text",
            DefaultValue = "Uci Name",
            UserPin = true,
            PinStyle = "Input",
            Count = 1
        })
    
        table.insert(ctrls, {
            Name = "tab." .. i .. ".active",
            ControlType = "Button",
            ButtonType = "Toggle",
            DefaultValue = 0,
            UserPin = true,
            PinStyle = "Both",
            Count = 1
        })
        table.insert(ctrls, {
            Name = "tab." .. i .. ".page.forward",
            ControlType = "Button",
            ButtonType = "Momentary",
            DefaultValue = 0,
            UserPin = true,
            PinStyle = "None",
            Count = 1
        })
        table.insert(ctrls, {
            Name = "tab." .. i .. ".page.backward",
            ControlType = "Button",
            ButtonType = "Momentary",
            DefaultValue = 0,
            UserPin = true,
            PinStyle = "None",
            Count = 1
        })
        table.insert(ctrls, {
            Name = "tab." .. i .. ".page.count",
            ControlType = "Text",
            DefaultValue = "0",
            UserPin = true,
            PinStyle = "Input",
            Count = 1
        })
    end
    
    if props["System Power States"].Value == true then
        table.insert(ctrls, {
            Name = "system.on",
            ControlType = "Button",
            ButtonType = "Momentary",
            DefaultValue = 0,
            UserPin = true,
            PinStyle = "Both",
            Count = 1
        })
        table.insert(ctrls, {
            Name = "system.off",
            ControlType = "Button",
            ButtonType = "Momentary",
            DefaultValue = 0,
            UserPin = true,
            PinStyle = "Both",
            Count = 1
        })
        table.insert(ctrls, {
            Name = "system.on.page.name",
            ControlType = "Text",
            DefaultValue = "Page Name",
            UserPin = true,
            PinStyle = "Input",
            Count = 1
        })
        table.insert(ctrls, {
            Name = "system.off.page.name",
            ControlType = "Text",
            DefaultValue = "Page Name",
            UserPin = true,
            PinStyle = "Input",
            Count = 1
        })
        table.insert(ctrls, {
            Name = "system.loading.page.name",
            ControlType = "Text",
            DefaultValue = "Page Name",
            UserPin = true,
            PinStyle = "Input",
            Count = 1
        })
        table.insert(ctrls, {
            Name = "system.loading.time",
            ControlType = "Text",
            DefaultValue = "Seconds",
            UserPin = true,
            PinStyle = "Input",
            Count = 1
        })
    end
    return ctrls
end

-- Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
    local layout = {}
    local graphics = {}
    local CurrentPage = PageNames[props["page_index"].Value]
    if CurrentPage == "Setup" then
    
        for i = 1, props["Number of TSCs"].Value do
            table.insert(graphics, {
                Type = "Text",
                Text = "TSC " .. i .. " Name",
                Position = {0, (i * 32) + 20},
                Size = {100, 16},
                FontSize = 14,
                HTextAlign = "Right"
            })
            layout["tsc." .. i] = {
                PrettyName = "TSC " .. i .. " Name",
                Style = "Text",
                FontSize = 14,
                HTextAlign = "Center",
                Padding = 2,
                StrokeWidth = 1,
                Position = {100, (i * 32) + 20},
                Size = {100, 16},
                Color = {0, 0, 0}
    
            }
        end
        table.insert(graphics, {
            Type = "GroupBox",
            Text = "Setup TSCs (" .. props["Number of TSCs"].Value .. ")",
            Fill = {200, 200, 200},
            StrokeWidth = 1,
            Position = {5, 5},
            Size = {250, 40 + (props["Number of TSCs"].Value * 32)},
            ZOrder = 1
        })
    elseif CurrentPage == "Tabs" then
    
        for i = 1, props["Tabs"].Value do
            table.insert(graphics, {
                Type = "Text",
                Text = "Tab " .. i .. " Page Name",
                Position = {0, (i * 32) + 20},
                Size = {150, 16},
                FontSize = 14,
                HTextAlign = "Right"
            })
            layout["tab." .. i .. ".page.name"] = {
                PrettyName = "Tab " .. i .. " Page Name",
                Style = "Text",
                FontSize = 14,
                HTextAlign = "Center",
                Padding = 2,
                StrokeWidth = 1,
                Position = {150, (i * 32) + 20},
                Size = {100, 16},
                Color = {0, 0, 0}
            }
    
            table.insert(graphics, {
                Type = "Text",
                Text = "Tab " .. i .. " UCI Name",
                Position = {250, (i * 32) + 20},
                Size = {150, 16},
                FontSize = 14,
                HTextAlign = "Right"
            })
            layout["tab." .. i .. ".uci.name"] = {
                PrettyName = "Tab " .. i .. " UCI Name",
                Style = "Text",
                FontSize = 14,
                HTextAlign = "Center",
                Padding = 2,
                StrokeWidth = 1,
                Position = {400, (i * 32) + 20},
                Size = {100, 16},
                Color = {0, 0, 0}
            }
    
            table.insert(graphics, {
                Type = "Text",
                Text = "Tab " .. i .. " # of Pages",
                Position = {500, (i * 32) + 20},
                Size = {150, 16},
                FontSize = 14,
                HTextAlign = "Right"
            })
            layout["tab." .. i .. ".page.count"] = {
                PrettyName = "Tab " .. i .. " Number of Pages",
                Style = "Text",
                FontSize = 14,
                HTextAlign = "Center",
                Padding = 2,
                StrokeWidth = 1,
                Position = {650, (i * 32) + 20},
                Size = {50, 16},
                Color = {0, 0, 0}
            }
    
        end
        table.insert(graphics, {
            Type = "GroupBox",
            Text = "Setup Tabs (" .. props["Tabs"].Value .. ")",
            Fill = {200, 200, 200},
            StrokeWidth = 1,
            Position = {5, 5},
            Size = {700, 40 + (props["Tabs"].Value * 32)},
            ZOrder = 1
        })
    elseif CurrentPage == "Power States" then
        if (props["System Power States"].Value == true) then
            table.insert(graphics, {
                Type = "Text",
                Text = "System On Page Name",
                Position = {0, 30},
                Size = {200, 16},
                FontSize = 14,
                HTextAlign = "Right"
            })
            layout["system.on.page.name"] = {
                PrettyName = "System On Page Name",
                Style = "Text",
                FontSize = 14,
                HTextAlign = "Center",
                Padding = 2,
                StrokeWidth = 1,
                Position = {200, 30},
                Size = {100, 16},
                Color = {0, 0, 0}
            }
            table.insert(graphics, {
                Type = "Text",
                Text = "System Off Page Name",
                Position = {0, 60},
                Size = {200, 16},
                FontSize = 14,
                HTextAlign = "Right"
            })
            layout["system.off.page.name"] = {
                PrettyName = "System Off Page Name",
                Style = "Text",
                FontSize = 14,
                HTextAlign = "Center",
                Padding = 2,
                StrokeWidth = 1,
                Position = {200, 60},
                Size = {100, 16},
                Color = {0, 0, 0}
            }
            table.insert(graphics, {
                Type = "Text",
                Text = "System Loading Page Name",
                Position = {0, 90},
                Size = {200, 16},
                FontSize = 14,
                HTextAlign = "Right"
            })
            layout["system.loading.page.name"] = {
                PrettyName = "System Loading Page Name",
                Style = "Text",
                FontSize = 14,
                HTextAlign = "Center",
                Padding = 2,
                StrokeWidth = 1,
                Position = {200, 90},
                Size = {100, 16},
                Color = {0, 0, 0}
            }
            table.insert(graphics, {
                Type = "Text",
                Text = "Loading Time (Seconds)",
                Position = {0, 120},
                Size = {200, 16},
                FontSize = 14,
                HTextAlign = "Right"
            })
            layout["system.loading.time"] = {
                PrettyName = "System Loading Time (Seconds)",
                Style = "Text",
                FontSize = 14,
                HTextAlign = "Center",
                Padding = 2,
                StrokeWidth = 1,
                Position = {200, 120},
                Size = {100, 16},
                Color = {0, 0, 0}
            }
        end
        table.insert(graphics, {
            Type = "GroupBox",
            Text = "Setup System Power States",
            Fill = {200, 200, 200},
            StrokeWidth = 1,
            Position = {5, 5},
            Size = {300, 150},
            ZOrder = 1
        })
    elseif CurrentPage == "Controls" then
        if (props["System Power States"].Value == true) then
            table.insert(graphics, {
                Type = "Text",
                Text = "System On",
                Position = {50, 40 - 16},
                Size = {100, 16},
                FontSize = 14,
                HTextAlign = "Left"
            })
            layout["system.on"] = {
                ClassName = "primary-button",
                PrettyName = "Controls~System On",
                Style = "Button",
                ButtonStyle = "Momentary",
                ButtonVisualStyle = "Flat",
    
                Position = {50, 40},
                Size = {100, 16},
                StrokeWidth = 0,
                ZOrder = 5,
                FontSize = 15,
                Text = "On"
            }
    
            table.insert(graphics, {
                Type = "Text",
                Text = "System Off",
                Position = {150, 40 - 16},
                Size = {100, 16},
                FontSize = 14,
                HTextAlign = "Left"
            })
            layout["system.off"] = {
                ClassName = "primary-button",
                PrettyName = "Controls~System Off",
                Style = "Button",
                ButtonStyle = "Momentary",
                ButtonVisualStyle = "Flat",
    
                Position = {150, 40},
                Size = {100, 16},
                StrokeWidth = 0,
                ZOrder = 5,
                FontSize = 15,
                Text = "On"
            }
        end
        for i = 1, props["Tabs"].Value do
            table.insert(graphics, {
                Type = "Text",
                Text = "Tab " .. i,
                Position = {0, (i * 32) + 50},
                Size = {50, 16},
                FontSize = 14,
                HTextAlign = "Right"
            })
    
            table.insert(graphics, {
                Type = "Text",
                Text = "←",
                Position = {50, (i * 32) + 50 - 16},
                Size = {50, 16},
                FontSize = 14,
                HTextAlign = "Left"
            })
            layout["tab." .. i .. ".page.backward"] = {
                ClassName = "primary-button",
                PrettyName = "Controls~Tab " .. i .. " Page Backward",
                Style = "Button",
                ButtonStyle = "Momentary",
                ButtonVisualStyle = "Flat",
    
                Position = {50, (i * 32) + 50},
                Size = {50, 16},
                StrokeWidth = 0,
                ZOrder = 5,
                FontSize = 15,
                Text = "Activate"
            }
            table.insert(graphics, {
                Type = "Text",
                Text = "→",
                Position = {100, (i * 32) + 50 - 16},
                Size = {50, 16},
                FontSize = 14,
                HTextAlign = "Left"
            })
            layout["tab." .. i .. ".page.forward"] = {
                ClassName = "primary-button",
                PrettyName = "Forward",
                Style = "Button",
                ButtonStyle = "Momentary",
                ButtonVisualStyle = "Flat",
    
                Position = {100, (i * 32) + 50},
                Size = {50, 16},
                StrokeWidth = 0,
                ZOrder = 5,
                FontSize = 15,
                Text = "Activate"
            }
            table.insert(graphics, {
                Type = "Text",
                Text = "Activate",
                Position = {200, (i * 32) + 50 - 16},
                Size = {75, 16},
                FontSize = 14,
                HTextAlign = "Left"
            })
            layout["tab." .. i .. ".active"] = {
                ClassName = "primary-button",
                PrettyName = "Controls~Tab Active " .. i,
                Style = "Button",
                ButtonStyle = "Toggle",
                ButtonVisualStyle = "Flat",
    
                Position = {200, (i * 32) + 50},
                Size = {50, 16},
                StrokeWidth = 0,
                ZOrder = 5,
                FontSize = 15,
                Text = "Activate"
            }
        end
        table.insert(graphics, {
            Type = "GroupBox",
            Text = "Setup Tabs (" .. props["Tabs"].Value .. ")",
            Fill = {200, 200, 200},
            StrokeWidth = 1,
            Position = {5, 5},
            Size = {300, 80 + (props["Tabs"].Value * 32)},
            ZOrder = 1
        })
    
        -- table.insert(graphics,{
        --   Type = "GroupBox",
        --   Text = "Control ("..props["Number of Faders"].Value..")",
        --   Fill = {200,200,200},
        --   StrokeWidth = 1,
        --   Position = {5,5},
        --   Size = {200+(props["Number of Faders"].Value*86),400},
        --   ZOrder = 1,
        -- })
    
        -- for i=1,props["Number of Faders"].Value do
    
        --   layout["Meter " .. i] = {
        --     PrettyName = "Indicators~Meter " .. i,
        --     Style = "Meter",
        --     StrokeWidth = 0,
        --     CornerRadius = 0,
        --     ShowTextbox = false,
        --     MeterStyle="Level",
    
        --     --100
        --     Position = {(i*86) + 24,85},
        --     Size = {39,114},
        --     ZOrder = 4,
    
        --   }
    
        --   layout["Gain " .. i] = {
        --     ClassName="primary-button",
        --     PrettyName = "Controls~Gain " .. i,
        --     Style = "Fader",
        --     --76
        --     Position = {(i*86) + 0,50},
        --     Size = {86,189},
        --     StrokeWidth = 0,
        --     ShowTextbox = false,
        --     ZOrder = 5,
        --   }
        --   layout["Mute " .. i] = {
        --     ClassName="fader-mute-button",
        --     PrettyName = "Controls~Mute " .. i,
        --     Style = "Button",
        --     ButtonStyle = "Toggle",
        --     ButtonVisualStyle = "Flat",
        --     --76
        --     Position = {(i*86) + 5,239},
        --     Size = {76,35},
        --     StrokeWidth = 0,
        --     ZOrder = 5,
        --     FontSize=15,
        --     Text="Mute"
        --   }
    
        -- end
    end
    return layout, graphics
end

-- Start event based logic
if Controls then
    -- Data
    local tabPagePositions = {}
    print("Registering Data")
    
    -- Helper Functions
    function resetTabActivators(ignoreIndex)
        for i = 1, Properties["Tabs"].Value do
            if i ~= ignoreIndex then
                Controls["tab." .. i .. ".active"].Boolean = false
            end
        end
    end
    
    function getTSCStrings()
        local tscs = {}
        for i = 1, Properties["Number of TSCs"].Value do
            table.insert(tscs, Controls["tsc." .. i].String)
        end
        return tscs
    end
    
    -- Event Registering 
    print("Registering Events")
    
    for i = 1, Properties["Tabs"].Value do
        Controls["tab." .. i .. ".active"].EventHandler = function(ctx)
            if (ctx.Boolean == false) then
                return
            end
            resetTabActivators(i)
    
            local pageName = Controls["tab." .. i .. ".page.name"].String
            for _, tsc in next, getTSCStrings() do
                print("Setting ", tsc, " to Page ", pageName)
                Uci.SetPage(tsc, pageName)
            end
        end
        Controls["tab." .. i .. ".page.forward"].EventHandler = function(ctx)
            if (ctx.Boolean == false) then
                return
            end
            local numberOfSubPages = tonumber(Controls["tab." .. i .. ".page.count"].String)
            local currentPage = tabPagePositions[i]
            if (currentPage == nil) then
                currentPage = 1
                tabPagePositions[i] = 1
            end
            local newPage = currentPage + 1
            if (newPage > numberOfSubPages) then
                newPage = 1
            end
            if (newPage <= 0) then
                newPage = numberOfSubPages
            end
    
            local pageName = Controls["tab." .. i .. ".page.name"].String
            local uciName = Controls["tab." .. i .. ".uci.name"].String
    
            print("New Page ", newPage)
            -- control sub page layer visibility
            for d = 1, numberOfSubPages do
                if (d == newPage) then
                    Uci.SetLayerVisibility(uciName, pageName, pageName .. d, true)
                else
                    Uci.SetLayerVisibility(uciName, pageName, pageName .. d, false)
                end
            end
            tabPagePositions[i] = newPage
        end
        Controls["tab." .. i .. ".page.backward"].EventHandler = function(ctx)
            if (ctx.Boolean == false) then
                return
            end
            local numberOfSubPages = tonumber(Controls["tab." .. i .. ".page.count"].String)
            local currentPage = tabPagePositions[i]
            if (currentPage == nil) then
                currentPage = 1
                tabPagePositions[i] = 1
            end
            local newPage = currentPage - 1
            if (newPage > numberOfSubPages) then
                newPage = 1
            end
            if (newPage <= 0) then
                newPage = numberOfSubPages
            end
    
            local pageName = Controls["tab." .. i .. ".page.name"].String
            local uciName = Controls["tab." .. i .. ".uci.name"].String
    
            print("New Page ", newPage)
            -- control sub page layer visibility
            for d = 1, numberOfSubPages do
                if (d == newPage) then
                    Uci.SetLayerVisibility(uciName, pageName, pageName .. d, true)
                else
                    Uci.SetLayerVisibility(uciName, pageName, pageName .. d, false)
                end
            end
            tabPagePositions[i] = newPage
        end
    end
    if (Properties["System Power States"].Value == true) then
        Controls["system.on"].EventHandler = function(ctx)
            if (ctx.Boolean == false) then
                return
            end
            print("System On")
            local loadingPage = Controls["system.loading.page.name"].String
            local loadingTime = tonumber(Controls["system.loading.time"].String)
            local pageName = Controls["system.on.page.name"].String
            if (loadingTime ~= nil) then
                for _, tsc in next, getTSCStrings() do
                    print("Setting ", tsc, " to Page ", loadingPage)
                    Uci.SetPage(tsc, loadingPage)
                end
                Timer.CallAfter(function()
    
                    for _, tsc in next, getTSCStrings() do
                        print("Setting ", tsc, " to Page ", pageName)
                        Uci.SetPage(tsc, pageName)
                    end
                end, loadingTime)
            end
    
        end
        Controls["system.off"].EventHandler = function(ctx)
            if (ctx.Boolean == false) then
                return
            end
            print("System Off")
            local loadingPage = Controls["system.loading.page.name"].String
            local loadingTime = tonumber(Controls["system.loading.time"].String)
            local pageName = Controls["system.off.page.name"].String
            if (loadingTime ~= nil) then
                for _, tsc in next, getTSCStrings() do
                    print("Setting ", tsc, " to Page ", loadingPage)
                    Uci.SetPage(tsc, loadingPage)
                end
                Timer.CallAfter(function()
    
                    for _, tsc in next, getTSCStrings() do
                        print("Setting ", tsc, " to Page ", pageName)
                        Uci.SetPage(tsc, pageName)
                    end
                end, loadingTime)
            end
        end
    end
    
    -- for i=1,Properties["Number of Faders"].Value do
    --   print("Registering " .. i)
    
    --   Controls["Gain " .. i].EventHandler=function(ct)
    --     print(i .. " gain " .. ct.Value)
    --     _G["gain" .. i]["gain"].Value = ct.Value
    --     if  Properties["Auto Mute"].Value == "Yes" then
    --       print(ct.Value,Properties["Min Gain"].Value)
    --       if ct.Value <= Properties["Min Gain"].Value then
    --         print("AUTO MUTE")
    --         Controls["Mute " .. i].Value = 1.0
    --       end
    --     end
    --   end
    --   Controls["Mute " .. i].EventHandler=function(ct)
    --     print(i .. " mute " .. ct.Value)
    --     _G["gain" .. i]["mute"].Value = ct.Value
    --   end
    
    --   print("main_meter_"..i.."meter.1")
    --   _G["meter"..i]["meter.1"].EventHandler=function(ct)
    --     Controls["Meter " .. i].Value = ct.Value
    --   end
    
    -- end
end
